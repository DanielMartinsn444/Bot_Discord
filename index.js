require('dotenv').config();

const { Client, GatewayIntentBits, ChannelType, PermissionsBitField } = require('discord.js');
const http = require('http');


let linkConvitePermanente = null;
const NOME_DO_CANAL_CONVITE = 'geral'; 
const INTERVALO_RESPOSTAS = 3 * 60 * 60 * 1000;

process.on('unhandledRejection', (reason, promise) => {
    console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
    console.error('Uncaught Exception:', error);
});

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.DirectMessages, 
    ],
});

const mensagensAleatorias = [
    "N√£o se esque√ßa de importar o React no topo do seu arquivo JSX, mesmo que ele n√£o seja usado explicitamente!",
    "Dica de Hooks: Use o 'useCallback' e 'useMemo' para otimizar a performance, evitando recria√ß√µes desnecess√°rias.",
    "Para lidar com formul√°rios no React, tente usar componentes controlados (controlled components).",
    "Passe fun√ß√µes como 'props' para permitir que componentes filhos se comuniquem com o pai!",
    "Sempre use o 'map()' para renderizar listas de componentes no React, ele √© o rei das itera√ß√µes.",
    "O 'Redux' ou 'Zustand' s√£o √≥timos para gerenciar estados globais em aplica√ß√µes grandes.",
    "Dica: Os erros mais comuns no React est√£o relacionados √† falta do 'key' em listas ou loops infinitos no 'useEffect'.",
    "Um componente funcional √© mais f√°cil de testar do que um componente de classe.",
    "Use 'Styled Components' ou 'Tailwind CSS' para estilizar seus componentes de forma moderna.",
    "O 'Context API' √© excelente para evitar o 'prop drilling' (passar props por muitos n√≠veis).",
    "Para carregar dados de uma API, use o 'useEffect' e n√£o se esque√ßa do array de depend√™ncias vazio `[]` na primeira carga.",
    "Sempre desmonte seus efeitos no 'useEffect' para evitar vazamentos de mem√≥ria (memory leaks).",
    "React Query ou SWR s√£o ferramentas de ponta para gerenciamento de cache de dados ass√≠ncronos.",
    "Lembre-se: 'props' s√£o imut√°veis (read-only)! Para mudar algo, use o 'state'.",
    "Componentes devem ser como fun√ß√µes puras: dado o mesmo 'input' ('props' e 'state'), o 'output' √© o mesmo.",
    "O 'Babel' √© o seu tradutor de JavaScript moderno para a linguagem que o navegador entende.",
    "Quer fazer anima√ß√µes no React? D√™ uma olhada no 'Framer Motion'!",
    "A diferen√ßa entre 'state' e 'props' √© crucial: 'state' √© interno, 'props' √© externo.",
    "Use fragmentos (`<>...</>`) para agrupar elementos sem adicionar n√≥s desnecess√°rios ao DOM.",
    "Lembre-se que o 'default export' √© usado para o principal componente do arquivo!",
    "Sempre use '===' em vez de '==' para evitar compara√ß√µes inesperadas no JavaScript.",
    "As 'Arrow Functions' (`=>`) mant√™m o contexto do `this` do escopo pai. Isso √© muito importante!",
    "Use 'async/await' para deixar seu c√≥digo ass√≠ncrono muito mais limpo e leg√≠vel.",
    "Dica: O operador 'spread' (`...`) √© √≥timo para clonar arrays e objetos rapidamente.",
    "O m√©todo 'filter()' √© perfeito para criar um novo array com apenas os itens que voc√™ precisa.",
    "O 'reduce()' √© a fun√ß√£o mais vers√°til: ele pode fazer o trabalho do 'map' e do 'filter'!",
    "Use 'template literals' (crases!) para criar strings multilinhas e inserir vari√°veis.",
    "Entenda o 'escopo' (`scope`) das suas vari√°veis. Isso √© fundamental para evitar bugs.",
    "O conceito de 'closure' (fechamento) √© o que faz o JavaScript ser t√£o poderoso.",
    "Nunca pare de estudar: o ecossistema JavaScript est√° sempre evoluindo!",
    "Use o `Array.isArray()` para garantir que uma vari√°vel √© realmente um array.",
    "N√£o use o `for...in` para iterar arrays, use `for...of` ou os m√©todos de array (`map`, `forEach`).",
    "Dica: Configure o ESLint e Prettier para manter a qualidade e o estilo do seu c√≥digo.",
    "Os m√≥dulos ES6 (`import`/`export`) s√£o a forma moderna e padr√£o de organizar seu c√≥digo.",
    "Aprenda sobre 'Promises' e como elas simplificam o gerenciamento de c√≥digo ass√≠ncrono.",
    "O operador 'optional chaining' (`?.`) evita erros chatos com objetos nulos ou indefinidos.",
    "Tente manter suas fun√ß√µes pequenas e focadas em uma √∫nica tarefa. Princ√≠pio S.O.L.I.D.!",
    "Use `try...catch` para lidar de forma segura com exce√ß√µes e erros no c√≥digo.",
    "Dica de Node.js: Mantenha as suas depend√™ncias atualizadas, mas com cuidado para n√£o quebrar o projeto.",
    "Aprender a usar o Git (versionamento) √© t√£o importante quanto saber programar.",
    "Curiosidade: O JavaScript foi criado em apenas 10 dias por Brendan Eich!",
    "A programa√ß√£o √© 10% escrever c√≥digo e 90% entender o porqu√™ dele n√£o funcionar.",
    "A melhor forma de resolver um problema √© explic√°-lo em voz alta para si mesmo (ou para um patinho de borracha!).",
    "N√£o existe c√≥digo perfeito, apenas c√≥digo que funciona e √© f√°cil de manter.",
    "Sempre documente as partes mais complexas do seu c√≥digo para o seu 'eu' do futuro!",
    "O termo 'bug' nasceu de um inseto real que causou um problema em um computador antigo.",
    "Lembre-se: todo grande desenvolvedor j√° foi um iniciante. N√£o desista!",
    "Tentar debugar por horas e resolver o problema com uma linha de c√≥digo: a melhor sensa√ß√£o do mundo.",
    "Mantenha a calma e continue codificando. Os bugs s√£o apenas desafios disfar√ßados.",
    "A sintaxe do JavaScript foi inspirada em Java, mas a sua funcionalidade veio de Scheme e Self.",
    "Curiosidade: O nome de c√≥digo inicial do JavaScript foi 'Mocha', depois 'LiveScript'.",
    "O 'Stack Overflow' √© a biblioteca de todo programador. Use-o com sabedoria.",
    "A pr√°tica leva √† perfei√ß√£o. Tente construir algo pequeno todos os dias.",
    "Dica: Use sempre o modo 'Dark' no seu editor de c√≥digo. Seus olhos agradecem! üï∂Ô∏è",
    "N√£o tenha medo de refatorar (reorganizar) um c√≥digo antigo para melhor√°-lo.",
    "O 'front-end' √© a arte de criar experi√™ncias incr√≠veis para o usu√°rio.",
    "Curiosidade: O Google usou o React no seu novo recurso de 'Web Vitals'!",
    "A chave para ser um bom programador √© a curiosidade incessante.",
    "O conceito de 'SPA' (Single Page Application) popularizado pelo React mudou a web.",
    "Se voc√™ est√° aprendendo, voc√™ est√° vencendo. Mantenha o foco!",
    "Use o `key` em listas para evitar o aviso no console e otimizar a performance.",
    "Para testes unit√°rios, o Jest e o React Testing Library s√£o as ferramentas mais populares.",
    "O `useReducer` √© uma alternativa poderosa ao `useState` para estados mais complexos.",
    "Sempre trate os avisos (warnings) do React como se fossem erros!",
    "O `fetch()` ou o `axios` s√£o usados para fazer requisi√ß√µes HTTP (chamar APIs).",
    "Lembre-se de fazer 'deploy' do seu c√≥digo depois de grandes mudan√ßas!",
    "Use 'prop-types' ou 'TypeScript' para validar os dados que chegam no seu componente.",
    "Aprenda a inspecionar o c√≥digo do site. O DevTools do navegador √© uma arma secreta.",
    "Dica: O `async/await` √© a√ß√∫car sint√°tico para Promises, mas √© muito mais bonito.",
    "Mantenha os componentes o mais 'burros' (dumb) poss√≠vel, focando s√≥ na interface.",
    "A 'composi√ß√£o' de componentes √© mais importante que a 'heran√ßa' no React.",
    "Crie uma boa pasta de 'Utilities' para fun√ß√µes que voc√™ usa em todo o projeto.",
    "O que s√£o 'side effects'? Qualquer coisa que acontece fora do escopo da sua fun√ß√£o (ex: APIs, timers).",
    "Evite usar 'index' como `key` em listas que mudam de ordem. Isso gera bugs.",
    "O 'memo' √© como uma 'cache' para o seu componente. Se as 'props' n√£o mudarem, ele n√£o renderiza.",
    "Curiosidade: O TypeScript √© a linguagem que mais cresce na √°rea de front-end!",
    "N√£o misture l√≥gica de neg√≥cios com a l√≥gica de interface. Separe as responsabilidades!",
    "Sempre inicialize o 'state' com um valor padr√£o (ex: `null`, `[]`, ou `0`).",
    "Aprenda a ler a documenta√ß√£o do React, √© o recurso mais valioso que existe.",
    "Para gerenciar rotas, o 'BrowserRouter' √© o mais comum no React Router.",
    "N√£o hesite em perguntar! A comunidade est√° aqui para ajudar uns aos outros.",
    "Se est√° funcionando, mas voc√™ n√£o sabe o porqu√™, a gente tem um problema! üòÖ",
    "A melhor forma de aprender √© ensinando. Tente ajudar algu√©m no chat!",
    "Curiosidade: O React Native permite que voc√™ use o React para criar apps m√≥veis!",
    "Lembre-se de agradecer quem te ajudou a resolver um bug. √â um bom h√°bito!",
    "Seu c√≥digo √© o seu legado. Escreva-o com clareza e eleg√¢ncia.",
    "Onde est√° o erro? No √∫ltimo lugar que voc√™ olhou! Continue tentando.",
    "N√£o se prenda a uma √∫nica tecnologia. Mantenha a mente aberta para aprender novas.",
    "O seu editor de c√≥digo √© o seu melhor amigo. Aprenda a us√°-lo com maestria.",
    "Parab√©ns por estar construindo algo! O c√≥digo √© a nova forma de magia.",
    "Dica de comunidade: Seja sempre respeitoso e paciente com os colegas.",
    "O 'npm' (Node Package Manager) √© um universo de bibliotecas. Use o poder dele!",
    "O pr√≥ximo passo de aprendizado √© sempre o mais recompensador. Continue avan√ßando!",
    "Se voc√™ conseguir explicar o seu c√≥digo para um leigo, ele √© bom o suficiente.",
    "A 'clean code' √© o caminho para a felicidade do desenvolvedor.",
    "O React √© uma biblioteca, n√£o um framework completo. Ele te d√° mais liberdade.",
    "N√£o tenha medo de deletar c√≥digo que n√£o √© mais usado. C√≥digo limpo √© c√≥digo menor.",
    "Cada erro resolvido √© uma habilidade a mais na sua caixa de ferramentas.",
    "O futuro √© promissor para quem domina o JavaScript e o React. Avance!",
    "Continue codificando, e um dia voc√™ vai olhar para tr√°s e se orgulhar do que fez."
];

let frasesDisponiveis = [...mensagensAleatorias];

function pegarFraseAleatoria() {
    if (frasesDisponiveis.length === 0) {
        frasesDisponiveis = [...mensagensAleatorias];
    }
    const indice = Math.floor(Math.random() * frasesDisponiveis.length);
    const frase = frasesDisponiveis[indice];
    frasesDisponiveis.splice(indice, 1);
    return frase;
}

client.on('clientReady', async () => {
    console.log(`Opa, ${client.user.tag} t√° online!`);
    
    
    try {
        const canalConvite = client.channels.cache.find(c => c.name === NOME_DO_CANAL_CONVITE);
        
        if (canalConvite) {
            
            const invite = await canalConvite.createInvite({
                maxUses: 0,   
                maxAge: 0,    
                reason: 'Link de convite permanente para comando !convite'
            });
            
            linkConvitePermanente = invite.url;
            console.log(`[CONVITE] Link permanente gerado com sucesso: ${linkConvitePermanente}`);
        } else {
            console.error(`[CONVITE] Canal "${NOME_DO_CANAL_CONVITE}" n√£o encontrado.`);
        }
    } catch (error) {
        if (error.code === 50013) {
             console.error("[CONVITE] ERRO: Permiss√£o 'Criar Convites' n√£o encontrada para o bot!");
        } else {
            console.error('[CONVITE] Erro ao criar o link permanente (Pode ser que um j√° exista):', error);
        }
    }
    
    
    setInterval(() => {
        console.log('Tentando enviar uma mensagem...');
        const canal = client.channels.cache.find(c => c.name === 'geral');
        if (canal) {
            try {
                console.log('Canal "geral" encontrado! Enviando...');
                const mensagem = pegarFraseAleatoria();
                canal.send(mensagem);
            } catch (error) {
                console.log(`ERRO AO ENVIAR MENSAGEM: ${error.message}`);
            }
        } else {
            console.log('Canal "geral" n√£o encontrado. Verifique o nome do canal.');
        }
    }, INTERVALO_RESPOSTAS); 
});

client.on('guildMemberAdd', member => {
    const welcomeChannel = member.guild.channels.cache.find(channel => channel.name === 'geral');
    if (welcomeChannel) {
        welcomeChannel.send(`E a√≠, ${member}! Bem-vindo ao servidor. D√° uma olhada no canal 'Fundamentos'!`);
    }
});

client.on('shardDisconnect', () => {
    console.log('Bot desconectado! Tentando reconectar...');
    client.login(process.env.TOKEN);
});

client.on('messageCreate', message => {
    if (message.author.bot) return;
    const mensagemMinuscula = message.content.toLowerCase();
    
    
    if (mensagemMinuscula === '!ajuda' || mensagemMinuscula === '/ajuda') {
        message.reply(`Ol√°! Eu sou o ReactBot, seu assistente no servidor. 

d√™ uma olhada nos canais abaixo:
- Convites: Digite /convite ou !convite (somente admins) para obter o link permanente.
- Geral: Onde voc√™ pode interagir comigo e outros membros.
- Fundamentos: Aqui voc√™ pode revisar todo o conte√∫do do curso.
-M√∫sica: para ouvir m√∫sica basta digitar: m!play (nome da m√∫sica)
*Obs: precisa estar no canal de voz geral para funcionar! ¬† 
`);
        return;
    }
    
 
    if (mensagemMinuscula === '!convite' || mensagemMinuscula === '/convite') {
        
        if (message.guild && message.member) {
            
           
            const temPermissao = message.member.permissions.has(PermissionsBitField.Flags.ManageGuild) || message.member.id === message.guild.ownerId;
            
            if (!temPermissao) {
                return message.reply('Desculpe, este comando √© restrito a administradores e ao dono do servidor por motivos de seguran√ßa.');
            }
        } else {
            
            return message.reply('Voc√™ s√≥ pode usar o comando de convite dentro do servidor!');
        }
        
        
        if (linkConvitePermanente) {
            message.reply(`Aqui est√° o link permanente para o nosso servidor (uso exclusivo de admins): ${linkConvitePermanente}`);
        } else {
            message.reply('Desculpe, o link de convite permanente ainda n√£o foi gerado ou houve um erro. Tente novamente em um minuto.');
        }
        return;
    }
    
    
    if (message.channel.type === ChannelType.DM) {
        message.reply('Voc√™ pode digitar /ajuda para ver o que posso fazer!');
    }
});

http.createServer((req, res) => {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.end('O bot esta funcionando!');
}).listen(process.env.PORT || 3000);

const botToken = process.env.TOKEN;
client.login(botToken);